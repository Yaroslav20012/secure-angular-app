import { HttpInterceptorFn } from '@angular/common/http';
import { inject } from '@angular/core';
import { AuthService } from '../services/auth.service';
import { throwError } from 'rxjs';

export const AuthInterceptor: HttpInterceptorFn = (req, next) => {
  try {  
  console.log('üßæ Interceptor –≤—ã–∑–≤–∞–Ω'); // ‚úÖ –≠—Ç–æ—Ç –ª–æ–≥ –¥–æ–ª–∂–µ–Ω –ø–æ—è–≤–∏—Ç—å—Å—è
  const authService = inject(AuthService);
  const currentUser = authService.getCurrentUser();      
    if (currentUser?.token && !isTokenExpired(currentUser.token)) {
      req = req.clone({
        setHeaders: {
          Authorization: `Bearer ${currentUser.token}`
        }
      });
    }
    return next(req);
  } catch (e) {
    const err = e as Error;
    console.error("–û—à–∏–±–∫–∞ –≤ –∏–Ω—Ç–µ—Ä—Å–µ–ø—Ç–æ—Ä–µ: ", err.message);
    return throwError(() => err);
  }
};

function isTokenExpired(token: string): boolean {
  try {
    const payload = JSON.parse(atob(token.split('.')[1]));
    const exp = payload.exp;
    return Date.now() >= exp * 1000; // –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥—ã
  } catch {
    return true; // –ø–æ–≤—Ä–µ–∂–¥—ë–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω —Å—á–∏—Ç–∞–µ–º –∏—Å—Ç—ë–∫—à–∏–º
  }
}