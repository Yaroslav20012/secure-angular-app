  import { Component, OnInit } from '@angular/core';
  import { HttpClient } from '@angular/common/http';
  import { AuthService } from '../../services/auth.service';
  import { Router, RouterModule } from '@angular/router';
  import { CommonModule } from '@angular/common';
  @Component({
    selector: 'app-dashboard',
    templateUrl: './dashboard.component.html',
    standalone: true,
    imports: [CommonModule, RouterModule]
  })
  export class DashboardComponent implements OnInit {
    users: any[] = [];
    error: string = '';
    currentUser: any;

    constructor(
      private http: HttpClient,
      private authService: AuthService,
      private router: Router
    ) {}

    ngOnInit(): void {
      if (!this.authService.isAuthenticated()) {

        console.warn('‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω ‚Üí —Ä–µ–¥–∏—Ä–µ–∫—Ç–∏–º –Ω–∞ /login');

        this.router.navigate(['/login']);
        return;
      }

      this.currentUser = this.authService.getCurrentUser();
      

      console.log('üßæ –¢–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–∑ localStorage:', this.currentUser);
      console.log('üßæ –¢–æ–∫–µ–Ω:', this.currentUser.token);
      console.log('üßæ Payload:', JSON.parse(atob(this.currentUser.token.split('.')[1])));


      this.http.get('/api/user/all', {withCredentials: true, } ).subscribe({
        next: (data: any) => {

          console.log('üìä –ü–æ–ª—É—á–µ–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:', data);

          this.users = data || [];
        },
        error: (err) => {
          console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', err.message);
          this.error = '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö';
        }
      });
    }

    isUserAdmin(): boolean {
      return this.currentUser?.role === 'admin';
    }

    deleteUser(id: number): void {
      if (this.currentUser.id === id) {
        alert('–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å —Å–∞–º–æ–≥–æ —Å–µ–±—è');
        return;
      }

      if (!confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã?')) return;

      this.http.delete(`/api/user/${id}`).subscribe({
        next: () => {
          this.users = this.users.filter(u => u.id !== id);
        },
        error: (err) => {
          console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è:', err.message);
          this.error = '–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è';
        }
      });
    }
  }
